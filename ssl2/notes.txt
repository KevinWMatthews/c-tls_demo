# Generate root directory for all certs
$ mkdir ssl2
$ cd ssl2


### Root CA
$ mkdir root_ca

# Create key for root CA
$ openssl genrsa \
    -aes256 \
    -out root_ca/root_ca.key.pem \
    4096
ROOT_CA

# Check key
$ openssl rsa \
    -check \
    -noout \
    -in root_ca/root_ca.key.pem

# Self-sign cert for root CA
$ openssl req \
    -new \
    -x509 \
    -config root_ca/root_ca.cnf \
    -extensions v3_root_ca \
    -key root_ca/root_ca.key.pem \
    -out root_ca/root_ca.crt.pem

# Verify cert
$ openssl x509 \
    -noout \
    -text \
    -in root_ca/root_ca.crt.pem



### Intermediate CA
$ mkdir intermediate_ca

# Generate key for intermediate CA
$ openssl genrsa \
    -aes256 \
    -out intermediate_ca/intermediate_ca.key.pem \
    4096
INTERMEDIATE_CA

# Check key
$ openssl rsa \
    -check \
    -noout \
    -in intermediate_ca/intermediate_ca.key.pem

# Generate certificate signing request (CSR) for intermediate CA
$ vim intermediate_ca/intermediate_ca.cnf

#TODO are the extensions needed? They seem to have no effect on the actual .pem file, so I think not.
    # -extensions v3_intermediate_ca \
$ openssl req \
    -new \
    -config intermediate_ca/intermediate_ca.cnf \
    -key intermediate_ca/intermediate_ca.key.pem \
    -out intermediate_ca/intermediate_ca.csr.pem

# Verify CSR
$ openssl req \
    -verify \
    -text \
    -noout \
    -in intermediate_ca/intermediate_ca.csr.pem

# Sign intermediate CA with root CA
$ touch root_ca/index.txt
$ touch root_ca/index.txt.attr
$ echo '00' > root_ca/serial.txt
$ mkdir root_ca/new_certs

$ openssl ca \
    -config root_ca/root_ca.cnf \
    -extensions v3_intermediate_ca \
    -notext \
    -in intermediate_ca/intermediate_ca.csr.pem \
    -out intermediate_ca/intermediate_ca.crt.pem

# Verify cert
$ openssl x509 \
    -noout \
    -text \
    -in intermediate_ca/intermediate_ca.crt.pem

# Verify chain
$ openssl verify \
    -CAfile root_ca/root_ca.crt.pem \
    intermediate_ca/intermediate_ca.crt.pem

# Create intermediate cert chain
$ cat intermediate_ca/intermediate_ca.crt.pem root_ca/root_ca.crt.pem > intermediate_ca/ca-chain.crt.pem

# Prepare intermediate cert for signing other CSR's
$ touch intermediate_ca/index.txt
$ touch intermediate_ca/index.txt.attr
$ mkdir intermediate_ca/new_certs
$ echo '00' > intermediate_ca/serial.txt


### Generate server cert
# Generate private key
$ openssl genrsa \
    -aes256 \
    -out intermediate_ca/localhost_server.key.pem \
    2048
LOCALHOST_SERVER

# Check key
$ openssl rsa \
    -check \
    -noout \
    -in intermediate_ca/localhost_server.key.pem

$ vim intermediate_ca/localhost_server.cnf
# Generate server CSR
$ openssl req \
    -new \
    -config intermediate_ca/localhost_server.cnf \
    -key intermediate_ca/localhost_server.key.pem \
    -out intermediate_ca/localhost_server.csr.pem

# Verify CSR
$ openssl req \
    -verify \
    -text \
    -noout \
    -in intermediate_ca/localhost_server.csr.pem

# Sign server CSR with intermediate CA
$ openssl ca \
    -notext \
    -config intermediate_ca/intermediate_ca.cnf \
    -extensions server_cert \
    -in intermediate_ca/localhost_server.csr.pem \
    -out intermediate_ca/localhost_server.crt.pem

# Verify cert
$ openssl x509 \
    -noout \
    -text \
    -in intermediate_ca/localhost_server.crt.pem

# Verify cert chain
$ openssl verify \
    -CAfile intermediate_ca/intermediate_ca.crt.pem \
    intermediate_ca/localhost_server.crt.pem
Should fail!

$ openssl verify \
    -CAfile intermediate_ca/ca-chain.crt.pem \
    intermediate_ca/localhost_server.crt.pem
Success



### Generate client cert
# Generate private key
$ openssl genrsa \
    -aes256 \
    -out intermediate_ca/localhost_client.key.pem \
    2048

# Check key
$ openssl rsa \
    -check \
    -noout \
    -in intermediate_ca/localhost_client.key.pem

# Generate server CSR
$ vim intermediate_ca/localhost_client.cnf
$ openssl req \
    -new \
    -config intermediate_ca/localhost_client.cnf \
    -key intermediate_ca/localhost_client.key.pem \
    -out intermediate_ca/localhost_client.csr.pem

# Verify CSR
$ openssl req \
    -verify \
    -text \
    -noout \
    -in intermediate_ca/localhost_client.csr.pem

# Sign server CSR with intermediate CA
$ openssl ca \
    -notext \
    -config intermediate_ca/intermediate_ca.cnf \
    -extensions client_cert \
    -in intermediate_ca/localhost_client.csr.pem \
    -out intermediate_ca/localhost_client.crt.pem

# Verify cert
$ openssl x509 \
    -noout \
    -text \
    -in intermediate_ca/localhost_client.crt.pem

# Verify cert chain
$ openssl verify \
    -CAfile intermediate_ca/intermediate_ca.crt.pem \
    intermediate_ca/localhost_client.crt.pem
Should fail!

$ openssl verify \
    -CAfile intermediate_ca/ca-chain.crt.pem \
    intermediate_ca/localhost_client.crt.pem
Success



### Generate server cert
# Generate private key
$ openssl genrsa \
    -aes256 \
    -out intermediate_ca/ip_server.key.pem \
    2048
IP_SERVER

# Check key
$ openssl rsa \
    -check \
    -noout \
    -in intermediate_ca/ip_server.key.pem

$ vim intermediate_ca/ip_server.cnf

# Generate server csr
$ openssl req \
    -new \
    -config intermediate_ca/ip_server.cnf \
    -key intermediate_ca/ip_server.key.pem \
    -out intermediate_ca/ip_server.csr.pem

# Verify CSR
$ openssl req \
    -verify \
    -text \
    -noout \
    -in intermediate_ca/ip_server.csr.pem

# Sign server CSR with intermediate CA
$ openssl ca \
    -notext \
    -config intermediate_ca/intermediate_ca.cnf \
    -extensions server_cert \
    -in intermediate_ca/ip_server.csr.pem \
    -out intermediate_ca/ip_server.crt.pem

# Verify cert
$ openssl x509 \
    -noout \
    -text \
    -in intermediate_ca/ip_server.crt.pem

# Verify cert chain
$ openssl verify \
    -CAfile intermediate_ca/intermediate_ca.crt.pem \
    intermediate_ca/ip_server.crt.pem
Should fail!

$ openssl verify \
    -CAfile intermediate_ca/ca-chain.crt.pem \
    intermediate_ca/ip_server.crt.pem
Success



### Generate client cert
# Generate private key
$ openssl genrsa \
    -aes256 \
    -out intermediate_ca/ip_client.key.pem \
    2048
IP_CLIENT

# Check key
$ openssl rsa \
    -check \
    -noout \
    -in intermediate_ca/ip_client.key.pem

# Generate server CSR
$ vim intermediate_ca/ip_client.cnf
$ openssl req \
    -new \
    -config intermediate_ca/ip_client.cnf \
    -key intermediate_ca/ip_client.key.pem \
    -out intermediate_ca/ip_client.csr.pem

# Verify CSR
$ openssl req \
    -verify \
    -text \
    -noout \
    -in intermediate_ca/ip_client.csr.pem

# Sign server CSR with intermediate CA
$ openssl ca \
    -notext \
    -config intermediate_ca/intermediate_ca.cnf \
    -extensions client_cert \
    -in intermediate_ca/ip_client.csr.pem \
    -out intermediate_ca/ip_client.crt.pem

# Verify cert
$ openssl x509 \
    -noout \
    -text \
    -in intermediate_ca/ip_client.crt.pem

# Verify cert chain
$ openssl verify \
    -CAfile intermediate_ca/intermediate_ca.crt.pem \
    intermediate_ca/ip_client.crt.pem
Should fail!

$ openssl verify \
    -CAfile intermediate_ca/ca-chain.crt.pem \
    intermediate_ca/ip_client.crt.pem
Success
