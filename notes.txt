Certificate genearation process:

Generate Certificate Authority key and certificate:
$ ./generate_crt.sh config/ca.cnf keys/ca.key keys/ca.crt
$ ./verify_key.sh keys/ca.key
$ ./verify_crt.sh keys/ca.crt

Generate Certificate Signing Request for server:
$ ./generate_csr.sh config/server.cnf keys/server.key keys/server.csr
$ ./verify_key.sh keys/server.key
$ ./verify_csr.sh keys/server.csr

Sign Certificate Signing Request for server:
$ ./sign_csr.sh keys/ca.crt keys/ca.key config/server.cnf keys/server.csr keys/server.crt
$ ./verify_crt.sh keys/server.crt

Generate and sign client certificate:
$ ./generate_csr.sh config/client.cnf keys/client.key keys/client.csr
$ ./verify_key.sh keys/client.key
$ ./verify_csr.sh keys/client.csr
$ ./sign_csr.sh keys/ca.crt keys/ca.key config/client.cnf keys/client.csr keys/client.crt
$ ./verify_crt.sh keys/client.crt

Generate Diffie-Hellman params for server app:
$ ./generate_diffie_hellman_params.sh keys/dh1024.pem



We could generate a Certificate Signing Request and send it off to a Certificate Authority for approval.
For us, a self-signed certificate is sufficient.

Format of index.txt:
  * Entry Type
    - V (valid), R (Revoked), E (Expired)
  * Expiration datetime
  * Revocation datetime (if R)
  * Serial Number
  * Filename of Certificate
  * Certificate Subject Name


Encrypted with      Decrypted with
    public key      private key
    private key     public or private key

Traditional encryption:
    Bob and Alice get each other's public keys

    [random data encrypted with Alice's public key]
    Bob      =>     Alice
                    Decrypts random data.
                    (Can only be decrypted with Alice's private key)
    Bob     <=      Alice


TLS (SSL) certificates:
    Server:
        Generate certificate

    User:
        Load server certificate to client

    Server:
        Hash certificate
        Encrypt with private key
        Append to certificate
        Server sends this new certificate to client

    Client:
        decrypts hash using the public key from the manually loaded certificate (not in the certificate that the server sent)
        calculates its own hash
        compares calculated hash to decrypted hash

    Client:
        generate random number
        encrypt with public key from manually loaded certificate
        send to server

    Server:
        decrypt random data with its private key
        send decrypted data to client

    Client:
        compare received data to generated data


Terms:
    X.509 Certificate       TLS/SSL Certificate
    CSR                     Certificate Signing Request


openssl req
    Create and/or process certificate requests
    Reads the [ req ] section of a config file.



Generate a new private key and Certificate Signing Request

    openssl req -out CSR.csr -new -newkey rsa:2048 -nodes -keyout privateKey.key

Generate a self-signed certificate (see How to Create and Install an Apache Self Signed Certificate for more info)

    openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout privateKey.key -out certificate.crt

Generate a certificate signing request (CSR) for an existing private key

    openssl req -out CSR.csr -key privateKey.key -new

Generate a certificate signing request based on an existing certificate

    openssl x509 -x509toreq -in certificate.crt -out CSR.csr -signkey privateKey.key

Remove a passphrase from a private key

    openssl rsa -in privateKey.pem -out newPrivateKey.pem



Check a Certificate Signing Request (CSR)

    openssl req -text -noout -verify -in CSR.csr

Check a private key

    openssl rsa -in privateKey.key -check

Check a certificate

    openssl x509 -in certificate.crt -text -noout

Check a PKCS#12 file (.pfx or .p12)

    openssl pkcs12 -info -in keyStore.p12



Check an MD5 hash of the public key to ensure that it matches with what is in a CSR or private key

    openssl x509 -noout -modulus -in certificate.crt | openssl md5
    openssl rsa -noout -modulus -in privateKey.key | openssl md5
    openssl req -noout -modulus -in CSR.csr | openssl md5

Check an SSL connection. All the certificates (including Intermediates) should be displayed

    openssl s_client -connect www.paypal.com:443



Convert a DER file (.crt .cer .der) to PEM

    openssl x509 -inform der -in certificate.cer -out certificate.pem

Convert a PEM file to DER

    openssl x509 -outform der -in certificate.pem -out certificate.der

Convert a PKCS#12 file (.pfx .p12) containing a private key and certificates to PEM

    openssl pkcs12 -in keyStore.pfx -out keyStore.pem -nodes

You can add -nocerts to only output the private key or add -nokeys to only output the certificates.
Convert a PEM certificate file and a private key to PKCS#12 (.pfx .p12)

    openssl pkcs12 -export -out certificate.pfx -inkey privateKey.key -in certificate.crt -certfile CACert.crt
