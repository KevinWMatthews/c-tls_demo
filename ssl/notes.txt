# Generate root directory for all certs
$ mkdir ssl
$ cd ssl


### Root CA
$ mkdir root_ca
$ vim root_ca/root_ca.cnf


# Create key for root CA
# Can be generated with the root CA cert - I think I'd rather do this?
$ openssl genrsa \
    -aes256 \
    -out root_ca/root_ca.key.pem \
    4096
root_ca

# Check key
$ openssl rsa \
    -check \
    -noout \
    -in root_ca/root_ca.key.pem

# Self-sign cert for root CA
# Prints to stdout by default, so specify -out
# -x509 generates a self-signed cert instead of a certificate signing request (-in is used to sign a csr)
# -new generates a new request
# -batch for non-interactive
# Input key and output cert can not be specified in the config file?
# Note the extensions!
$ openssl req \
    -new \
    -x509 \
    -config root_ca/root_ca.cnf \
    -extensions v3_root_ca \
    -key root_ca/root_ca.key.pem \
    -out root_ca/root_ca.crt.pem

# Verify cert
$ openssl x509 \
    -noout \
    -text \
    -in root_ca/root_ca.crt.pem


### Intermediate CA
$ mkdir intermediate_ca

# Generate key for intermediate CA
$ openssl genrsa \
    -aes256 \
    -out intermediate_ca/intermediate_ca.key.pem \
    4096
intermediate_ca

# Generate certificate signing request (CSR) for intermediate CA
$ vim intermediate_ca/intermediate_ca.cnf
$ openssl req \
    -new \
    -config intermediate_ca/intermediate_ca.cnf \
    -extensions v3_intermediate_ca \
    -key intermediate_ca/intermediate_ca.key.pem \
    -out intermediate_ca/intermediate_ca.csr.pem

# Verify CSR
# -noout    do not print csr hash
# -text     print in human-readable form
$ openssl req \
    -verify \
    -text \
    -noout \
    -in intermediate_ca/intermediate_ca.csr.pem

$ touch root_ca/index.txt
$ touch root_ca/index.txt.attr
$ echo '00' > root_ca/serial.txt
$ mkdir root_ca/new_certs

# Sign intermediate CA with root CA
# Specify the config file of the root CA - it is the one doing the signing so its function/operations must be configured
# Specify what kind of cert to create using -extensions
# OpenSSL ca will by default output the cert in text and pem form.
# Output only pem for using -notext
$ openssl ca \
    -config root_ca/root_ca.cnf \
    -extensions v3_intermediate_ca \
    -notext \
    -in intermediate_ca/intermediate_ca.csr.pem \
    -out intermediate_ca/intermediate_ca.crt.pem

# Verify cert
$ openssl x509 \
    -noout \
    -text \
    -in intermediate_ca/intermediate_ca.crt.pem

# Verify chain
$ openssl verify \
    -CAfile root_ca/root_ca.crt.pem \
    intermediate_ca/intermediate_ca.crt.pem

# Create intermediate cert chain
$ cat intermediate_ca/intermediate_ca.crt.pem root_ca/root_ca.crt.pem > intermediate_ca/ca-chain.cert.pem


# Prepare intermediate cert for signing other CSR's
$ touch intermediate_ca/index.txt
$ touch intermediate_ca/index.txt.attr
$ mkdir intermediate_ca/new_certs
$ echo '00' > intermediate_ca/serial.txt


### Generate server cert
# Generate private key
$ openssl genrsa \
    -aes256 \
    -out intermediate_ca/localhost_server.key.pem \
    2048
localhost_server

# Check key
$ openssl rsa \
    -check \
    -noout \
    -in intermediate_ca/localhost_server.key.pem

$ vim intermediate_ca/localhost_server.cnf

# Generate server csr
$ openssl req \
    -new \
    -config intermediate_ca/localhost_server.cnf \
    -key intermediate_ca/localhost_server.key.pem \
    -out intermediate_ca/localhost_server.csr.pem

# Verify csr
$ openssl req \
    -verify \
    -text \
    -noout \
    -in intermediate_ca/localhost_server.csr.pem

# Sign server CSR with intermediate CA
# The intermediate CA is doing the signing, so use its config file
# Note the extensions!
$ openssl ca \
    -notext \
    -config intermediate_ca/intermediate_ca.cnf \
    -extensions server_cert \
    -in intermediate_ca/localhost_server.csr.pem \
    -out intermediate_ca/localhost_server.crt.pem

# Verify cert
$ openssl x509 \
    -noout \
    -text \
    -in intermediate_ca/localhost_server.cert.pem

# Verify cert chain
$ openssl verify \
    -CAfile intermediate_ca/intermediate.cert.pem \
    intermediate_ca/localhost_server.cert.pem
Should fail!

$ openssl verify \
    -CAfile intermediate_ca/ca-chain.cert.pem \
    intermediate_ca/localhost_server.cert.pem
Success



### Generate client cert
# Generate private key
$ openssl genrsa \
    -aes256 \
    -out intermediate_ca/localhost_client.key.pem \
    2048
localhost

# Generate server csr
$ openssl req \
    -new \
    -config intermediate_ca/localhost_client.cnf \
    -key intermediate_ca/localhost_client.key.pem \
    -out intermediate_ca/localhost_client.csr.pem

# Sign server CSR with intermediate CA
# The intermediate CA is doing the signing, so use its config file
# Note the extensions!
$ openssl ca \
    -notext \
    -config intermediate_ca/intermediate_ca.cnf \
    -extensions client_cert \
    -in intermediate_ca/localhost_client.csr.pem \
    -out intermediate_ca/localhost_client.cert.pem

# Verify cert
$ openssl x509 \
    -noout \
    -text \
    -in intermediate_ca/localhost_client.cert.pem

# Verify cert chain
$ openssl verify \
    -CAfile intermediate_ca/intermediate.cert.pem \
    intermediate_ca/localhost_client.cert.pem
Should fail!

$ openssl verify \
    -CAfile intermediate_ca/ca-chain.cert.pem \
    intermediate_ca/localhost_client.cert.pem
Success
